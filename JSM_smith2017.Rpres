Zika is Coming and We need Statistics
========================================================
author:  Abby Smith, Elaine Liu, Sam Ventura
date: August 2, 2017
autosize: true



Roadmap
========================================================
incremental:true
1. History
2. Compartment Models and $R_{0}$
    + Standard SIR (Susceptible, Infected, Recovered)
    + Extensions to Vector-Borne Diseases
3. Agent-Based Models (ABMs)
      + Advantages of ABMs over Compartment Models
4. Generating Input (Synthetic Population) for an ABM, focusing on vectors
      + Using Maxent Model for species presence 
      + Generating a population for any vector, anytime, anywhere


    
Some History
========================================================
right: 60%
![Ronald Ross](ronald_ross.jpg) 
***
<small>
* 1883: Ronald Ross hypothesized connection between mosquitoes and malaria 
* Ross showed using a mathematical model that it was not necessary to remove every mosquito to bring the disease under control
* Led way to concept of "herd immunity"
   + Vaccinate a sufficient proportion of the population, the disease will not turn into an epidemic
   
</small>


Looking Ahead, Not Back
========================================================

<font size=5.75>
* McKendrick and Kermack (1920) extended Ross's work to group healthy and infected into **compartments**
* Most common compartment model: **SIR**
    + Start out susceptible to infections (**S**)
    + Upon exposure, they would move into the infectious group (**I**)
    + Leave infectious group. Either die or recover by gaining immunity (**R**)
* Basic way to study disease dynamics

</font>

***
<center><img src="sir_model.png" alt="SIRModel"  style="width: 500px; height: 500px"/>


The Remarkable \(R_{0}\): What causes an epidemic to end?
========================================================

<font size = 5.2>
* $R_{0}$ (basic reproduction number): expected number of secondary cases produced by a single (typical) infection in a completely susceptible population
* $R_{0}< 1$ : infection will die out, > 1 : infection will persist
* Has also helped predict the severity of new threats such as the SARS outbreak in 2003
* During the peak of the most recent Zika outbreak, the $R_{0} \approx 2$

</font>

<center><img src="R0.png" alt="SIRModel"  style="width: 600px; height: 250px"/>



Compartment Models of Vector-Borne Disease
========================================================

<center><img src="vector_transmis.jpg" alt="Vector SI Model"  style="width: 500px; "/>

*** 
<font size=5.8>
## Key Assumptions:
* Number of humans and mosquitoes are constant
* No acquired immunity
* Populations sizes are large, well-mixed
* Deterministic 

## Complications
* Stochasticity
* Mosquito behavior and biology
* Details of infections

</font>

Introduction to Agent-Based Models (ABMs)
========================================================
<font size = 5.7> 
* Powerful simulation modeling technique that has become popular over the years
* Collection of autonomous decision-making entities called agents
   + Going to school, going to work, and socializing 
* Can even demonstrate results of adaptive behavior
* Agents can be generated as part of a synthetic population: input to the ABM
    + Generated from real-world data
    
</font>

***

<center><img src="ABM_example.png" alt="ABM"  style="width: 500px"/>


Advantages of an Agent-Based Model
========================================================
### *What can ABMs do better than compartment models?*
* Adaptive Behavior: adjust their behavior to current state
* Emergence: system dynamics that arise because of agent actions and interactions
    + <small> ABMs are across-level: we can look at both what happens to the *system* because of what *individuals* do, and what happens to *individuals* because of what the *system* does </small>
    </font>
* Flexible
* Complex

What is a synthetic population for an ABM of a disease?
========================================================
right: 70%
<center><img src="SPEW_logo.jpg" alt="SPEW_logo"  style="width: 500px;"/>

*** 
<font size = 5.9>
* **Agents** - a set of indiviudals that interact with one another
* **Characteristics** - features of the agents (e.g., species, age, sex, race, type, etc.)
* **Locations** - where the agents are located
* **Environmental components** - loci of interaction of the agents (e.g., hospitals, schools, workplaces, fields, etc.)
* **Activities** - how the agents interact with one another and evolve over time
* **'Synthetic'** - created from data through statistical procedures
  + American Community Survey (U.S. Census)
  + American Time Use Survey
  
</font>



Goal: Vectors as Agents
========================================================
right: 65%

<span style="font-weight:bold; "> Ticks, Rats, Mosquitoes, Oh My! </span>
<br>
<font size = 4.5>
Vectors are important in infectious disease modelling, especially for diseases such as malaria or Zika.
</font> </span> 

<span style="font-weight:bold; "> Goal </span>
<br>
<font size = 4.5>
Generate synthetic population of infectious disease vectors to complement CMU's synthetic ecosystem (SPEW) that could be used as input to an ABM of a vector-borne disease. Be able to generate for <span style="font-weight:bold; color:red ;"> any species, 
any time of year, any where in the world. </font> </span> 
 

***
<center><img src="disease_plan.png" alt="Elaine"  style="width: 600px; height: 500px"/>

Maximum Entropy Model (Elith 2011)
========================================================
<font size = 5.8>

* Input Data
    + **Species Presence Data**: geographical locations of observed species
    + **Environment Factors**: a set of global climate layers (gridded climate data [precipitation, temperature, etc.]) from WorldClim
* Output Data: two types of probability grid cell outputs
    + Raw Probability: proportion of potential distribution each site represents
    + Logistic Probability: the probability of occurrence

</font> 

<font size = 5>
$$P_{raw} = \frac{f_1(z)}{f(z)}$$
$$P_{logit} = logistic (\frac{f_1(z)}{f(z)}) = logistic(P_{raw})$$

$$f_1(z): \text{conditional density at presence sites}$$
$$f(z): \text{marginal density across the study area}$$


</font>

Global to Local Predictions
========================================================
<font size=5.8>

* Take the name of a geographical region by a string vector

```{r, eval=FALSE}
c("USA")
c("USA", "Pennsylvania")
c("USA", "Pennsylvania", "Allegheny")

```

* Extract geographical boundaries from Global Administrative Areas (GADM) as spatial polygons 
* Masking the prediction grids with geographical boundaries to extract regional distribution
* Transform Raw Probability Predictions:

$$
\begin{aligned}
  P_{presence_{i} |presence_{local}} &= \frac{P_{presence_{i} \, \, \, and \, \, \, presence_{local}}}{P_{presence_{local}}} &= \frac{P_{presence_{i} \, \, \, and \, \, \, local}}{\sum_{j: Site_{j} \, \, \, in \, \, \, local} P_{presence_{i} \, \, \, and \, \, \, presence_{local}}} \\ &= \frac{P_{new \, \, \, raw}}{\sum_{j: Site_{j} \, \, \, in \, \, \, local} P_{raw_{i}}}
\end{aligned}
$$

</font>

Global to Local Predictions
========================================================

```{r, echo=FALSE}
#load packages
require(raster)
require(sp)
require(dismo) # dependencies: raster, sp
require(plyr)
require(albersusa)

```


```{r, echo=FALSE}
# function that takes in given species name (a vector containing genus and species name)
# and returns a dataframe of presence data for the specified species
get_species_data <- function(species_name) {
  a = 1
  # name for the dataframe/file containing the presence data for the specific species
  presence_name <- paste(c(species_name, "presence"), collapse="_")
  species_presence_filename <- paste(c(species_name, "presence.rds"), collapse="_")
  
  if (exists(presence_name)) {
    # presence data is already loaded in current session; return that data
    return (get(presence_name))
  } else if (file.exists(species_presence_filename)) {
    # presence data is saved locally; load data and return
    assign(presence_name, readRDS(species_presence_filename), envir=.GlobalEnv)
    return (get(presence_name))
  } else {
    # download presence data from GBIF and save locally
    species_presence <- gbif(genus=species_name[1], species=species_name[2])
    assign(presence_name, species_presence, envir=.GlobalEnv)
    # save data under specific species name
    saveRDS(get(presence_name), species_presence_filename)
    return (get(presence_name))
  }
}

get_environment_layers <- function(resolution=10) {
    climates_datafile_name <- "climates.rds"
    tmean <- getData('worldclim', var='tmean', res=resolution)
    tmin <- getData('worldclim', var='tmin', res=resolution)
    tmax <- getData('worldclim', var='tmax', res=resolution)
    prec <- getData('worldclim', var='prec', res=resolution)
    climate_jan <- stack(tmean$tmean1, tmin$tmin1, tmax$tmax1)
    climate_feb <- stack(tmean$tmean2, tmin$tmin2, tmax$tmax2, prec$prec2)
    climate_mar <- stack(tmean$tmean3, tmin$tmin3, tmax$tmax3, prec$prec3)
    climate_apr <- stack(tmean$tmean4, tmin$tmin4, tmax$tmax4, prec$prec4)
    climate_may <- stack(tmean$tmean5, tmin$tmin5, tmax$tmax5, prec$prec5)
    climate_jun <- stack(tmean$tmean6, tmin$tmin6, tmax$tmax6, prec$prec6)
    climate_jul <- stack(tmean$tmean7, tmin$tmin7, tmax$tmax7, prec$prec7)
    climate_aug <- stack(tmean$tmean8, tmin$tmin8, tmax$tmax8, prec$prec8)
    climate_sep <- stack(tmean$tmean9, tmin$tmin9, tmax$tmax9, prec$prec9)
    climate_oct <- stack(tmean$tmean10, tmin$tmin10, tmax$tmax10, prec$prec10)
    climate_nov <- stack(tmean$tmean11, tmin$tmin11, tmax$tmax11, prec$prec11)
    climate_dec <- stack(tmean$tmean12, tmin$tmin12, tmax$tmax12, prec$prec12)

    # save 12-month climates globally
    climates <- c(climate_jan, climate_feb, climate_mar, climate_apr, 
                    climate_may, climate_jun, climate_jul, climate_aug, 
                    climate_sep, climate_oct, climate_nov, climate_dec)
    saveRDS(climates, climates_datafile_name)
    return (climates)
}

get_maxent_predict <- function(month, species_presence, climate, species_name) {
  # java setup for maxent modeling
  jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
  # set prediction output filename
  predict_filename_logis <- paste(paste(species_name, collapse="_"), 
                                  "prediction_logis", month, ".asc", sep="_")
  predict_filename_raw <- paste(paste(species_name, collapse="_"), 
                                "prediction_raw", month, ".asc", sep="_")
  
  # prepare maxent_predict_raw
  if (file.exists(predict_filename_raw) && file.exists(predict_filename_logis)) {
    maxent_predict_raw <- raster(predict_filename_raw)
    maxent_predict_logis <- raster(predict_filename_logis)
  } else {
    model_month <- maxent(climate, species_presence)
    maxent_predict_raw <- predict(model_month, climate, filename=predict_filename_raw, 
                                  overwrite=T, args=c("outputformat=raw"))
    maxent_predict_logis <- predict(model_month, climate, 
                                    filename=predict_filename_logis, overwrite=T)
  }
  
  projection(maxent_predict_raw) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
  projection(maxent_predict_logis) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
  return (list(raw=maxent_predict_raw, logis=maxent_predict_logis))
}

get_boundary <- function(region) {
  if (length(region) == 1 ) {
    target_region <- getData("GADM", country=region, level=0)
  }
  else if (length(region) == 2) {
    nation <- getData("GADM", country=region[1], level=1)
    state <- region[2]
    target_region <- nation[match(toupper(state),toupper(nation$NAME_1)),]
  }
  else if (length(region) == 3) {
    nation <- getData("GADM", country=region[1], level=2)
    state <- region[3]
    target_region <- nation[match(toupper(state),toupper(nation$NAME_2)),]
  }
  return(target_region)
}

population_sampling <- function(maxent_predict_raw, maxent_predict_logis,
                                region=c("ITA"),
                                species, N, month_logis_base, month, 
                                graph_logis=F, graph_raw=F) {
  # get region's shape (sptialpolygons) and extract corresponding grids from prediction raster
  if(length(region)==1 & region=='USA'){
    target_region<- usa_composite(proj="longlat")
  }
  else{
      target_region <- get_boundary(region)
  }
  
  region_pred_raw <- mask(crop(maxent_predict_raw, target_region), target_region)
  
  region_pred_logis <- mask(crop(maxent_predict_logis, target_region), target_region)
  if (graph_logis) plot(region_pred_logis, 
                        main=paste("Logistic Probabilities -", 
                                   paste(region, collapse=",")))
  region_pred_logis_base <- mask(crop(month_logis_base, target_region), target_region)
  N <- (mean(getValues(region_pred_logis), na.rm=T) / 
        mean(getValues(region_pred_logis_base), na.rm=T) * N)

  # use raw probabilities from maxent model
  if (graph_raw) plot(region_pred_raw, 
                      main=paste("Raw Probabilities -", 
                                 paste(region, collapse=",")))
  probrast<-region_pred_raw

  # normalize the region probability raster by dividing 
  # by the sum of all probabilities within the region:
  probrast<-probrast/sum(getValues(probrast), na.rm=T)
  
  # a function to sample with replacement N points on a raster, with 
  # inclusion probabilities defined by the raster values
  probsel<-function(probrast, N, x_radius, y_radius){
    # extract values (probabilities) from raster
    x <- getValues(probrast)
    # set NA cells in raster to zero
    x[is.na(x)] <- 0
    # sample with replacement N cells
    samp <- sample(nrow(probrast)*ncol(probrast), replace=T, size=N, prob=x)
    # count the number of times each cell is selected
    freq_table <- count(samp)
    samprast <- probrast
    # set value of sampled cell to its count (selected times)
    samprast[freq_table$x] <- freq_table$freq 
    
    # a function to extract centers of selected grid cells from raster
    get_points <- function(i) (rasterToPoints(samprast, fun=function(x){x>=i}))
    
    # extract and combine cell centers 
    # according to the number of times each gets selected
    points <- do.call(rbind, lapply(1:max(freq_table$freq), get_points))
    
    # add within-cell variation to the coordinates selected
    x_vary <- runif(N, min = -x_radius, max = x_radius)
    y_vary <- runif(N, min = -y_radius, max = y_radius)
    points[,"x"] <- points[,"x"] + x_vary
    points[,"y"] <- points[,"y"] + y_vary
    
    # convert to SpatialPoints
    points<-SpatialPoints(points)
    return(points)
  }

  x_radius <- res(region_pred_raw)[1]/2
  y_radius <- res(region_pred_raw)[2]/2

  start_time <- Sys.time()
  sample_points<-probsel(probrast, N, x_radius, y_radius)
  end_time <- Sys.time()
  return (list(month_samples=sample_points, 
               month_region_log=region_pred_logis, 
               month_N=N))
}

```

```{r, echo=FALSE}
mosquito_presence <- get_species_data(c("aedes", "aegypti"))
mosquito_location <- mosquito_presence[, c("lon", "lat")]
# Example: predict mosquito distribution in June
month <- 6
mosquito_month <- mosquito_presence[mosquito_presence$month==month, c("lon", "lat")]
mosquito_month <- subset(mosquito_month, !is.na(lon) & !is.na(lat))

environment_data <- readRDS('climates.rds') 


mosquito_predictions_6 <- get_maxent_predict(month, mosquito_month, 
                                             environment_data[[6]], 
                                             c("aedes", "aegypti"))

sampling_results_US <- population_sampling(mosquito_predictions_6$raw,
                                        mosquito_predictions_6$logis,
                                        region=c("USA"),
                                        species=c("aedes", "aegypti"), 
                                        N=2000,
                                  month_logis_base=mosquito_predictions_6$logis, 
                                        month=6, graph_logis=F, graph_raw=F) 

sampling_results_MD <- population_sampling(mosquito_predictions_6$raw,
                                        mosquito_predictions_6$logis,
                                        region=c("USA", "Maryland"),
                                        species=c("aedes", "aegypti"), 
                                        N=2000,
                                        month_logis_base=mosquito_predictions_6$logis, 
                                        month=6, graph_logis=F, graph_raw=F) 

sampling_results_Baltimore <- population_sampling(mosquito_predictions_6$raw,
                                        mosquito_predictions_6$logis,
                                        region=c("USA", "Maryland", "Baltimore"),
                                        species=c("aedes", "aegypti"), 
                                        N=2000,
                                        month_logis_base=mosquito_predictions_6$logis, 
                                        month=6, graph_logis=F, graph_raw=F) 


```


```{r, echo=FALSE, cache=TRUE, fig.width=8,fig.height=4.5, out.width="940px", out.height="529px"}
par(mfrow = c(2, 2),     # 2x2 layout
    oma = c(2, 2, 0, 0), # two rows of text at the outer left and bottom margin
    mar = c(1, 1, 0, 0), # space for one row of text at ticks and to separate plots
    mgp = c(2, 1, 0),    # axis label at 2 rows distance, tick labels at 1 row
    xpd = NA)            # allow content to protrude into outer margin (and beyond)
plot(mosquito_predictions_6$logis, xaxt='n', yaxt='n')
plot(sampling_results_US$month_region_log,xaxt='n', yaxt='n')
plot(sampling_results_MD$month_region_log,xaxt='n', yaxt='n')
plot(sampling_results_Baltimore$month_region_log, xaxt='n', yaxt='n')
title("Logistic Probabilities for \n Aedes Aegypti Population, 
      \n Baltimore, MD", outer=T)


```


Time Dependent Predictions
========================================================

```{r, echo=FALSE, cache=TRUE}
require(dismo) # dependencies: raster, sp
library(plyr)
library(albersusa)
month <- 9
mosquito_month <- mosquito_presence[mosquito_presence$month==month, c("lon", "lat")]
mosquito_month <- subset(mosquito_month, !is.na(lon) & !is.na(lat))

environment_data <- get_environment_layers()




mosquito_predictions_9 <- get_maxent_predict(month, mosquito_month, 
                                             environment_data[[9]], 
                                             c("aedes", "aegypti"))

sampling_results_MD_Sept <- population_sampling(mosquito_predictions_9$raw,
                                        mosquito_predictions_9$logis,
                                        region=c("USA", "Maryland"),
                                        species=c("aedes", "aegypti"), 
                                        N=2000, month_logis_base=mosquito_predictions_9$logis, 
                                        month=9, graph_logis=F, graph_raw=F) 

par(mfrow=c(2,1), mar=c(1,1,1,1))
plot(sampling_results_MD$month_region_log, main='Predictions for June', xaxt='n', yaxt='n')
plot(sampling_results_MD_Sept$month_region_log, main='Predictions for September', xaxt='n', yaxt='n')


```

<font size= 4.5>
<div class="footer" style="margin-top:50px;">
$$\frac{\frac{1}{n_{j}} \sum_{\text{j: Site j in region}}P_{logit_{a,j}}}{\frac{1}{n_{j}} \sum_{\text{j: Site j in region}}P_{logit_{b,j}}} = \frac{\bar{P}_{logit_{a,j}}}{\bar{P}_{logit_{b,j}}}$$
</div>
</font>

***

<font size= 5.5>

* We can change environmental factors by:
  + Subsetting environment layers by month 
  + Subsetting species occurrence data by month 
  + Fitting separate models for each month


* Compare likelihood of a species' presence in different months using mean logistic probability ratios, which reflects the true probability of a species' presence

</font>

We can even look at climate change!
========================================================
```{r,echo=FALSE}
##NOTE: code would not wokr here, imported images from Elaines work

```
<center><img src="climate1.jpg" alt="1Climate "  style="width: 400px; height: 300px"/>

****

<center><img src="climate2.jpg" alt="2Climate "  style="width: 400px; height: 300px"/>




Population Sampling 
========================================================
```{r, echo=FALSE}
get_boundary <- function(region) {
  if (length(region) == 1 ) {
    target_region <- getData("GADM", country=region, level=0)
  }
  else if (length(region) == 2) {
    nation <- getData("GADM", country=region[1], level=1)
    state <- region[2]
    target_region <- nation[match(toupper(state),toupper(nation$NAME_1)),]
  }
  else if (length(region) == 3) {
    nation <- getData("GADM", country=region[1], level=2)
    state <- region[3]
    target_region <- nation[match(toupper(state),toupper(nation$NAME_2)),]
  }
  return(target_region)
}

```

```{r, echo=FALSE}
population_sampling_no_variation <- function(maxent_predict_raw, maxent_predict_logis,
                                region=c("ITA"),
                                species, N, month_logis_base, month, 
                                graph_logis=F, graph_raw=F) {
# get region's shape (sptialpolygons) and extract corresponding grids from prediction raster
  if(length(region)==1 && region=='USA'){
    target_region<- usa_composite(proj="longlat")
  }
  else{
      target_region <- get_boundary(region)
  }
  
  region_pred_raw <- mask(crop(maxent_predict_raw, target_region), target_region)
  
  region_pred_logis <- mask(crop(maxent_predict_logis, target_region), target_region)
  if (graph_logis) plot(region_pred_logis, 
                        main=paste("Logistic Probabilities -", 
                                   paste(region, collapse=",")))
  region_pred_logis_base <- mask(crop(month_logis_base, target_region), target_region)
  N <- (mean(getValues(region_pred_logis), na.rm=T) / 
        mean(getValues(region_pred_logis_base), na.rm=T) * N)

  # use raw probabilities from maxent model
  if (graph_raw) plot(region_pred_raw, 
                      main=paste("Raw Probabilities -", 
                                 paste(region, collapse=",")))
  probrast<-region_pred_raw

  # normalize the region probability raster by dividing 
  # by the sum of all probabilities within the region:
  probrast<-probrast/sum(getValues(probrast), na.rm=T)
  
  # a function to sample with replacement N points on a raster, with 
  # inclusion probabilities defined by the raster values
  probsel<-function(probrast, N, x_radius, y_radius){
    # extract values (probabilities) from raster
    x <- getValues(probrast)
    # set NA cells in raster to zero
    x[is.na(x)] <- 0
    # sample with replacement N cells
    samp <- sample(nrow(probrast)*ncol(probrast), replace=T, size=N, prob=x)
    # count the number of times each cell is selected
    freq_table <- count(samp)
    samprast <- probrast
    # set value of sampled cell to its count (selected times)
    samprast[freq_table$x] <- freq_table$freq 
    
    # a function to extract centers of selected grid cells from raster
    get_points <- function(i) (rasterToPoints(samprast, fun=function(x){x>=i}))
    
    # extract and combine cell centers 
    # according to the number of times each gets selected
    points <- do.call(rbind, lapply(1:max(freq_table$freq), get_points))
    
    # add within-cell variation to the coordinates selected
    # x_vary <- runif(N, min = -x_radius, max = x_radius)
    # y_vary <- runif(N, min = -y_radius, max = y_radius)
    # points[,"x"] <- points[,"x"] + x_vary
    # points[,"y"] <- points[,"y"] + y_vary
    
    # convert to SpatialPoints
    points<-SpatialPoints(points)
    return(points)
  }
  x_radius <- res(region_pred_raw)[1]/2
  y_radius <- res(region_pred_raw)[2]/2

  start_time <- Sys.time()
  sample_points<-probsel(probrast, N, x_radius, y_radius)
  end_time <- Sys.time()
  return (list(month_samples=sample_points, 
               month_region_log=region_pred_logis, 
               month_N=N))
}

```



```{r, echo=FALSE, }
#without "within cell variation"
sampling_results_novar<-population_sampling_no_variation(mosquito_predictions_6$raw,
                                        mosquito_predictions_6$logis,
                                        region=c("USA", "Maryland"),
                                        species=c("aedes", "aegypti"), 
                                        N=2000,
                                        month_logis_base=mosquito_predictions_6$logis, 
                                        month=6, graph_logis=F, graph_raw=F) 
par(mfrow=c(2,1), mar=c(1,1,1,1))
plot(sampling_results_novar$month_region_log, xaxt='n', yaxt='n', main='Randomly Sampled Grid Cells', cex.main=0.9)
points(sampling_results_novar$month_samples,cex=0.5, pch=16, col="blue")

#with normal within cell variation
plot(sampling_results_MD$month_region_log,xaxt='n', yaxt='n', main='Randomly Sampled Grid Cells + Within Cell Variation', cex.main=0.9)
points(sampling_results_MD$month_samples,cex=0.5, pch=16, col="blue")
```

*** 
<font size=5.5>

* **Monthly Sample Size** : Given a specific sample size in a reference month, calculate the corresponding sample size  for other months based on logistic probabilities, which reflect true probabilities of presence

$$N_{\text{given}} = \frac{\text{Mean(logistic prob in given month)}}{\text{Mean(logistic prob in reference month)}} \, \, \times N_{\text{ref}}$$


* **Sampling Methodology**: Sampling according to transformed regional raw probabilities, which reflect relative likelihood of a presence instance coming from each grid in the region

</font>

Simulation Results: Mosquitoes in MD (N=2000 in June)
========================================================
```{r, echo=FALSE, cache=TRUE}
run_simulation <- function(species_name, month, N, region, resolution=10) {
  species_presence <- get_species_data(species_name)
  species_month <- species_presence[species_presence$month==month,c("lon", "lat")]
  species_month <- subset(species_month, !is.na(lon) & !is.na(lat))
  climates <- get_environment_layers(resolution)
    
  # get environment data by month
  climate_month <- climates[[month]]

  # get maxent prediction for base month
  month_predicted_distributions <- get_maxent_predict(month, species_month, climate_month, species_name)
  month_logis_base <- month_predicted_distributions$logis
 
  monthly_logistic_distributions <- stack()
  monthly_samples <- c()
  monthly_N <- c()
  probability_ranges <- list()
  
  # get predictions and corresponding sampling for other month
  for (i in c(1:length(months))) {
    month <- months[i]
    # get species data by month
    species_month <- species_presence[species_presence$month==month,c("lon", "lat")]
    species_month <- subset(species_month, !is.na(lon) & !is.na(lat))
    
    # get environment data by month
    climate_month <- climates[[month]]

    # get maxent prediction
    month_predicted_distributions <- get_maxent_predict(month, species_month, climate_month, species_name)
    month_raw <- month_predicted_distributions$raw
    month_logis <- month_predicted_distributions$logis

    # sample from predicted distribution
    result <- population_sampling(month_raw, month_logis, region, species_name, N, month_logis_base, month)
    month_samples <- result$month_samples
    month_region_log <- result$month_region_log
    monthly_N <- c(monthly_N, result$month_N)
    monthly_logistic_distributions <- stack(monthly_logistic_distributions, month_region_log)
    monthly_samples <- c(monthly_samples, month_samples)
    probability_ranges[[i]] = range(getValues(month_logis), na.rm=T)
  }
  return  (list(log=monthly_logistic_distributions, sample=monthly_samples, 
                range=probability_ranges, N=monthly_N, species_name = species_name,
                region=region))
}


```

```{r, echo=FALSE, cache=TRUE, fig.width=8,fig.height=4.5, out.width="940px", out.height="529px"}
plot_one_result <- function(result, max_range) {
  par(mfrow=c(3,2),mar = c(1.5, 1.5, 1.5, 1.5))
  for (i in 1:nlayers(result$log)) {
    layer <- result$log[[i]]
    plot(layer, breaks=seq(from=min(max_range), to=max(max_range), length.out=100), 
         col=rev(terrain.colors(99)),
         legend=F,
         main=paste(paste(result$species_name, collapse=" "), as.integer(result$N[i]),"samples -", paste(result$region, collapse=", "), months[i]))
    plot(layer, legend.only=T, 
         breaks=seq(from=min(max_range), to=max(max_range), length.out=100), 
         col=rev(terrain.colors(99)),
          axis.args=list(at=seq(max_range[1], max_range[2], length.out=5),
                      labels=round(seq(max_range[1], max_range[2], length.out=5),3),
                      cex.axis=0.6),
         legend.args=list(text='Logistic Probability', side=4, font=2, line=2.5, cex=0.8))
    plot(result$sample[[i]], add=T, pch=16, cex=0.5, col="blue")
  }
}


months <- c(4:9)
month <- 6
N <- 2000
resolution <- 10
region1 <- c("USA", "Maryland")

#species_name1 <- c("Ixodes", "ricinus", "Linnaeus")
species_name2 <- c("aedes", "aegypti")


#result1 <- run_simulation(species_name1, month, N, region1, resolution)
result2 <- run_simulation(species_name2, month, N, region1, resolution)

plot_one_result(result2, c(0,1))

```

What about Zika?
========================================================

<center><img src="mosquito.jpg" alt="mosq"  style="width: 500px;"/>

***
<font size = 5.7>

* We now have a flexible data input that is environmentally and time dependent for *vectors* 
* Better data can give us better models
* Policy-makers can effectively use these models to predict the emergence of new diseases and see how behaviors impact the spread of Zika on a very local level


</font>

Summary
========================================================
<center><img src="MIDAS_logo.jpg" alt="midas"  style="width: 300px; height: 400px"/>

*** 

* Although compartment models for infectious diseases are useful and have a rich history- ABMs have high computational and predictive power!!
* We can start by generating the input: synthetic populations for both people and vectors!


References
========================================================

<font size= 4>

Agent-based model - Wikipedia. (n.d.). Retrieved April 3, 2017, from https://en.wikipedia.org/wiki/Agent-based_model

Chowell, G., C. Castillo-Chavez, P.W. Fenimore, C.M. Kribs-Zaleta, L. Arriola, J.M. Hyman. 2004. Model parameters and outbreak control. Emerging Infectious Disease Journal 28 March 2016].

Day, Troy, A. Park, N. Madras, A. Gumel, J. Wu. 2006. When Is Quarantine a Useful Control Strategy for Emerging Infectious Diseases? American Journal of Epidemiology 163 (5): 479-485. doi: 10.1093/aje/kwj05.

Elith, J., Phillips, S. J., Hastie, T., Dudak, M., Chee, Y. E., & Yates, C. J. (2011). A statistical explanation of MaxEnt for ecologists. Diversity and distributions, 17(1), 43-57.

Gallagher, S., Richardson, L., Ventura, S. L., & Eddy, W. F. (2017). SPEW: Synthetic Populations and Ecosystems of the World. arXiv preprint arXiv:1701.02383.

Hurford, Amy. 2016. Ronald Ross' mosquito theorem. Just Simple Enough: The Art of Mathematical Modelling.

Kukaswadia, Atif. 2016. John Snow: The First Epidemiologist. Public Health Perspectives.



</font>
